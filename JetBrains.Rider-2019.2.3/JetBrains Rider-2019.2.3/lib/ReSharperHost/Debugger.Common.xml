<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Debugger.Common</name>
    </assembly>
    <members>
        <member name="F:Debugger.Common.EnC.ActiveStatementFlags.IsLeafFrame">
            <summary>
            At least one of the threads whom this active statement belongs to is in a leaf frame.
            </summary>
        </member>
        <member name="F:Debugger.Common.EnC.ActiveStatementFlags.PartiallyExecuted">
            <summary>
            The statement is partially executed.
            </summary>
            <remarks>
            An active statement is partially executed if the thread is stopped in between two sequence points.
            This may happen when the users steps through the code in disassembly window (stepping over machine instructions),
            when the compiler emits a call to Debugger.Break (VB Stop statement), etc.
            
            Partially executed active statement can't be edited.
            </remarks>
        </member>
        <member name="F:Debugger.Common.EnC.ActiveStatementFlags.NonUserCode">
            <summary>
            The statement IL is not in user code.
            </summary>
        </member>
        <member name="F:Debugger.Common.EnC.ActiveStatementFlags.MethodUpToDate">
            <summary>
            Indicates that the active statement instruction belongs to the latest version of the containing method.
            If not set, the containing method was updated but the active statement was not remapped yet because the thread 
            has not returned to that instruction yet and was not remapped to the new version.
            </summary>
            <remarks>
            When the debugger asks the CLR for the active statement information it compares ICorDebugFunction.GetVersionNumber()
            and ICorDebugFunction.GetCurrentVersionNumber() to determine the value of this flag.
            </remarks>
        </member>
        <member name="F:Debugger.Common.EnC.ActiveStatementFlags.IsNonLeafFrame">
            <summary>
            At least one of the threads whom this active statement belongs to is in a non-leaf frame.
            </summary>
        </member>
        <member name="P:Debugger.Common.ManagedSymbols.IManagedSequencePoint.EndLine">
            <summary>
            returns -1 if information is missing
            </summary>
        </member>
        <member name="P:Debugger.Common.ManagedSymbols.IManagedSequencePoint.EndColumn">
            <summary>
            returns -1 if information is missing
            </summary>
        </member>
        <member name="M:Debugger.Common.ManagedSymbols.UnmangedSymbols.SymManagedMethod.ReadMethodCustomDebugInformation(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.MethodDefinitionHandle)">
            <exception cref="T:System.BadImageFormatException">Invalid data format.</exception>
        </member>
        <member name="M:Debugger.Common.ManagedSymbols.UnmangedSymbols.SymManagedMethod.DecodeHoistedLocalScopes(System.Reflection.Metadata.BlobReader)">
            <exception cref="T:System.BadImageFormatException">Invalid data format.</exception>
        </member>
        <member name="M:Debugger.Common.ManagedSymbols.UnmangedSymbols.SymManagedMethod.TryGetCustomDebugInformation(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.EntityHandle,System.Guid,System.Reflection.Metadata.CustomDebugInformation@)">
            <exception cref="T:System.BadImageFormatException">Invalid data format.</exception>
        </member>
        <member name="M:Debugger.Common.ManagedSymbols.UnmangedSymbols.SymManagedMethod.GetDeltaRelativeMethodDefinitionHandle(System.Reflection.Metadata.MetadataReader,System.Int32)">
            <summary>
            Maps global method token to a handle local to the current delta PDB. 
            Debug tables referring to methods currently use local handles, not global handles. 
            See https://github.com/dotnet/roslyn/issues/16286
            </summary>
        </member>
        <member name="M:Debugger.Common.Utils.SymUnmanagedSymbolsUtils.GetDocumentsForMethodWithRetrying(Microsoft.DiaSymReader.ISymUnmanagedMethod,System.Int32)">
            <summary>
            This is the same Implementation as Microsoft.DiaSymReader.SymUnmanagedExtensions.GetDocumentsForMethod,
            but with retrying, because Microsoft.DiaSymReader.ISymEncUnmanagedMethod.GetDocumentsForMethod
            can return unexpected documents count
            </summary>
            <param name="method"></param>
            <param name="retryingCount"> Number of attempts to get all the expected documents</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <seealso cref="M:Microsoft.DiaSymReader.SymUnmanagedExtensions.GetDocumentsForMethod(Microsoft.DiaSymReader.ISymUnmanagedMethod)"/>
            <seealso cref="M:Microsoft.DiaSymReader.ISymEncUnmanagedMethod.GetDocumentsForMethod(System.Int32,System.Int32@,Microsoft.DiaSymReader.ISymUnmanagedDocument[])"/>
        </member>
    </members>
</doc>
