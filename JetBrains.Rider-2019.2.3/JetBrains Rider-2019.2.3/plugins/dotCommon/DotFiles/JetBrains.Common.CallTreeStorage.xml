<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Common.CallTreeStorage</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Common.CallTreeStorage.BinaryReaderCompactTreeReader">
            <summary>
            Used for multithread access to the tree stored in stream. When used with SnapshotStorageSections based on ReaderHolder, allows reuse of BinaryReaders
            </summary>
        </member>
        <member name="P:JetBrains.Common.CallTreeStorage.CompactTreeNode.Reference">
            <summary>
            Sibling or parent(if last child)
            </summary>
        </member>
        <member name="M:JetBrains.Common.CallTreeStorage.Dfs.IEmittedDfsNodeConsumer`2.StartNodeProcessing(System.UInt32,`0,`0,`1)">
            <summary>
            This method is called immediately after node index is assigned. newIndex values comes sequentially from 0..n
            No information about parent index is available.
            </summary>
            <param name="oldIndex"></param>
            <param name="newIndex"></param>
            <param name="leftIndex"></param>
            <param name="key"></param>
        </member>
        <member name="M:JetBrains.Common.CallTreeStorage.Dfs.IEmittedDfsNodeConsumer`2.EndNodeProcessing(System.UInt32,`0,JetBrains.Common.CallTreeStorage.Dfs.DfsNode{`0,`1})">
            <summary>
            This method is called when node construction is finished.
            </summary>
            <param name="oldIndex"></param>
            <param name="newIndex"></param>
            <param name="node"></param>
        </member>
        <member name="T:JetBrains.Common.CallTreeStorage.Dfs.KeyToNodesAscendingIndex`2">
            <summary>
            Stores indexes from small to big as they appear from dfs post order emitter
            </summary>
        </member>
        <member name="T:JetBrains.Common.CallTreeStorage.IIndexableCompactTreeReader">
            <summary>
            CompactTreeReader to work with IStructuredMemory. All pointers translated to 0-based indices. 
            </summary>
        </member>
    </members>
</doc>
